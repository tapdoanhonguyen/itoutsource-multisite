<?php

/**
 * @Project NUKEVIET 4.x
 * @Author NV SYSTEMS (hoangnt@nguyenvan.vn)
 * @Copyright (C) 2013 NV SYSTEMS. All rights reserved
 * @Blog http://nguyenvan.vn
 * @Developers http://nukeviet.systems
 * @License GNU/GPL version 2 or any later version
 * @Createdate  Mon, 20 Oct 2014 14:00:59 GMT
 */
 
namespace NukeViet\StoreHouse;
use PDO;
use PDOException;

class Pos extends MY_Controller
{
	public $warehouse_id = '';
	public $purchases_id = '';
	public $status = '';
    public function __construct($purchaesRegistry = array())
    {
		global $db_config, $db, $nv_Request;
		parent::__construct($purchaesRegistry);
		$this->pos_model = &load_class('Pos_model');
		$this->load->library('form_validation');
    }
	public function index($sid = NULL)    {
    	if ($sid == NULL) {
    		$date = NV_CURRENTTIME;
			$warehouse_id = $this->input->get_int('warehouse', 'post', 0);
            $customer_id = $this->input->get_int('customer', 'post', 0);
            $total_items = $this->input->get_int('total_items', 0);
			$sale_status = 4;
			$payment_status = 'due';
            $payment_term = 0;
			$due_date = date('Y-m-d', strtotime('+' . $payment_term . ' days'));
			$shipping = $this->input->get_int('shipping', 0);
			$customer_details = $this->site->getCompanyByID($customer_id);
            $customer = $customer_details->company != '-'  ? $customer_details->company : $customer_details->name;
            $biller_details = $this->user_id;
            if($biller_id > 0 ) 
				$biller = $biller_details->company != '-' ? $biller_details->company : $biller_details->name;
			$note = $this->sma->clear_tags($this->input->get_title('pos_note', ''));
            $staff_note = $this->sma->clear_tags($this->input->get_title('staff_note', ''));
            $reference = $this->site->getReference('orpos');
            $total = 0;
            $product_tax = 0;
            $product_discount = 0;
            $digital = FALSE;
            $gst_data = array();
            $total_cgst = $total_sgst = $total_igst = 0;
            $i = isset($_POST['product_code']) ? sizeof($_POST['product_code']) : 0;			for ($r = 0; $r < $i; $r++) {				$item_id = $_POST['product_id'][$r];                $item_type = $_POST['product_type'][$r];                $item_code = $_POST['product_code'][$r];                $item_name = $_POST['product_name'][$r];                $item_comment = $_POST['product_comment'][$r];                $item_option = isset($_POST['product_option'][$r]) && $_POST['product_option'][$r] != 'false' ? $_POST['product_option'][$r] : NULL;                $real_unit_price = $this->sma->formatDecimal($_POST['real_unit_price'][$r]);                $unit_price = $this->sma->formatDecimal($_POST['unit_price'][$r]);                $item_unit_quantity = $_POST['quantity'][$r];                $item_serial = isset($_POST['serial'][$r]) ? $_POST['serial'][$r] : '';                $item_tax_rate = isset($_POST['product_tax'][$r]) ? $_POST['product_tax'][$r] : NULL;                $item_discount = isset($_POST['product_discount'][$r]) ? $_POST['product_discount'][$r] : NULL;                $item_unit = $_POST['product_unit'][$r];                $item_quantity = $_POST['product_base_quantity'][$r];				 if (isset($item_code) && isset($real_unit_price) && isset($unit_price) && isset($item_quantity)) {                    $product_details = $item_type != 'manual' ? $this->pos_model->getProductByCode($item_code) : NULL;
			// $unit_price = $real_unit_price;
			if ($item_type == 'digital') {                        $digital = TRUE;                    }                    $pr_discount = $this->site->calculateDiscount($item_discount, $unit_price);                    $unit_price = $this->sma->formatDecimal($unit_price - $pr_discount);                    $item_net_price = $unit_price;                    $pr_item_discount = $this->sma->formatDecimal($pr_discount * $item_unit_quantity);                    $product_discount += $pr_item_discount;                    $pr_item_tax = $item_tax = 0;                    $tax = "";                    if (isset($item_tax_rate) && $item_tax_rate != 0) {                        $tax_details = $this->site->getTaxRateByID($item_tax_rate);                        $ctax = $this->site->calculateTax($product_details, $tax_details, $unit_price);                        $item_tax = $ctax['amount'];                        $tax = $ctax['tax'];                        if (!$product_details || (!empty($product_details) && $product_details->tax_method != 1)) {                            $item_net_price = $unit_price - $item_tax;                        }                        $pr_item_tax = $this->sma->formatDecimal(($item_tax * $item_unit_quantity), 4);                        if ($this->Settings->indian_gst && $gst_data = $this->gst->calculteIndianGST($pr_item_tax, ($biller_details->state == $customer_details->state), $tax_details)) {                            $total_cgst += $gst_data['cgst'];                            $total_sgst += $gst_data['sgst'];                            $total_igst += $gst_data['igst'];                        }                    }                    $product_tax += $pr_item_tax;                    $subtotal = (($item_net_price * $item_unit_quantity) + $pr_item_tax);                    $unit = $this->site->getUnitByID($item_unit);                    $product = array(                        'product_id'      => $item_id,                        'product_code'    => $item_code,                        'product_name'    => $item_name,                        'product_type'    => $item_type,                        'option_id'       => $item_option,                        'net_unit_price'  => $item_net_price,                        'unit_price'      => $this->sma->formatDecimal($item_net_price + $item_tax),                        'quantity'        => $item_quantity,                        'product_unit_id' => $unit ? $unit->id : NULL,                        'product_unit_code' => $unit ? $unit->code : NULL,                        'unit_quantity' => $item_unit_quantity,                        'warehouse_id'    => $warehouse_id,                        'item_tax'        => $pr_item_tax,                        'tax_rate_id'     => $item_tax_rate,                        'tax'             => $tax,                        'discount'        => $item_discount,                        'item_discount'   => $pr_item_discount,                        'subtotal'        => $this->sma->formatDecimal($subtotal),                        'serial_no'       => $item_serial,                        'real_unit_price' => $real_unit_price,                        'comment'         => $item_comment,                    );                    $products[] = ($product + $gst_data);                    $total += $this->sma->formatDecimal(($item_net_price * $item_unit_quantity), 4);                }			}			if (empty($products)) {                $url_back = NV_BASE_ADMINURL . 'index.php?' . NV_NAME_VARIABLE . '=' . $this->mod_data . '&' . NV_OP_VARIABLE . '=pos';			    $contents = nv_theme_alert($this->mod_lang['no_product'], $this->mod_lang['no_product'], 'warning', $url_back, $this->mod_lang['continue']);			    include NV_ROOTDIR . '/includes/header.php';			    echo nv_admin_theme($contents);			    include NV_ROOTDIR . '/includes/footer.php';            } elseif ($this->pos_settings->item_order == 1) {                krsort($products);            }            $order_discount = $this->site->calculateDiscount($this->input->get_int('discount','post', 0), ($total + $product_tax));            $total_discount = $this->sma->formatDecimal(($order_discount + $product_discount), 4);            $order_tax = $this->site->calculateOrderTax($this->input->get_int('order_tax', 'post', 0), ($total + $product_tax - $order_discount));            $total_tax = $this->sma->formatDecimal(($product_tax + $order_tax), 4);            $grand_total = $this->sma->formatDecimal(($total + $total_tax + $this->sma->formatDecimal($shipping) - $order_discount), 4);            $rounding = 0;            if ($this->pos_settings->rounding) {                $round_total = $this->sma->roundNumber($grand_total, $this->pos_settings->rounding);                $rounding = $this->sma->formatMoney($round_total - $grand_total);            }            $data = array('date'  => $date,                'reference_no'      => $reference,                'customer_id'       => $customer_id,                'customer'          => $customer,                'biller_id'         => $biller_details->admin_id,                'biller'            => $biller_details->username,                'warehouse_id'      => $warehouse_id,                'note'              => $note,                'staff_note'        => $staff_note,                'total'             => $total,                'product_discount'  => $product_discount,                'order_discount_id' => $this->input->get_int('discount','post', 0),                'order_discount'    => $order_discount,                'total_discount'    => $total_discount,                'product_tax'       => $product_tax,                'order_tax_id'      => $this->input->get_int('order_tax', 'post', 0),                'order_tax'         => $order_tax,                'total_tax'         => $total_tax,                'shipping'          => $this->sma->formatDecimal($shipping),                'grand_total'       => $grand_total,                'total_items'       => $total_items,                'sale_status'       => $sale_status,                'payment_status'    => $payment_status,                'payment_term'      => $payment_term,                'rounding'          => $rounding,                'suspend_note'      => $this->input->get_title('suspend_note', 'post', ''),                'pos'               => 1,                'paid'              => $this->input->get_int('amount-paid', 'post', 0),                'created_by'        => $this->session->userdata('user_id'),                'hash'              => hash('sha256', microtime() . mt_rand()),                );            if ($this->Settings->indian_gst) {                $data['cgst'] = $total_cgst;                $data['sgst'] = $total_sgst;                $data['igst'] = $total_igst;            }            if (!$suspend) {                $p = isset($_POST['amount']) ? sizeof($_POST['amount']) : 0;                $paid = 0;                for ($r = 0; $r < $p; $r++) {                    if (isset($_POST['amount'][$r]) && !empty($_POST['amount'][$r]) && isset($_POST['paid_by'][$r]) && !empty($_POST['paid_by'][$r])) {                        $amount = $this->sma->formatDecimal($_POST['balance_amount'][$r] > 0 ? $_POST['amount'][$r] - $_POST['balance_amount'][$r] : $_POST['amount'][$r]);                        if ($_POST['paid_by'][$r] == 'deposit') {                            if ( ! $this->site->check_customer_deposit($customer_id, $amount)) {                                $this->session->set_flashdata('error', lang("amount_greater_than_deposit"));                                redirect($_SERVER["HTTP_REFERER"]);                            }                        }                        if ($_POST['paid_by'][$r] == 'gift_card') {                            $gc = $this->site->getGiftCardByNO($_POST['paying_gift_card_no'][$r]);                            $amount_paying = $_POST['amount'][$r] >= $gc->balance ? $gc->balance : $_POST['amount'][$r];                            $gc_balance = $gc->balance - $amount_paying;                            
			$payment[] = array(
			'date'         => $date,
			// 'reference_no' => $this->site->getReference('pay'),
			'amount'       => $amount,                                'paid_by'      => $_POST['paid_by'][$r],                                'cheque_no'    => $_POST['cheque_no'][$r],                                'cc_no'        => $_POST['paying_gift_card_no'][$r],                                'cc_holder'    => $_POST['cc_holder'][$r],                                'cc_month'     => $_POST['cc_month'][$r],                                'cc_year'      => $_POST['cc_year'][$r],                                'cc_type'      => $_POST['cc_type'][$r],                                'cc_cvv2'      => $_POST['cc_cvv2'][$r],                                'created_by'   => $this->session->userdata('user_id'),                                'type'         => 'received',                                'note'         => $_POST['payment_note'][$r],                                'pos_paid'     => $_POST['amount'][$r],                                'pos_balance'  => $_POST['balance_amount'][$r],                                'gc_balance'  => $gc_balance,                                );                        } else {                            
			$payment[] = array(
			'date'         => $date,
			// 'reference_no' => $this->site->getReference('pay'),
			'amount'       => $amount,                                'paid_by'      => $_POST['paid_by'][$r],                                'cheque_no'    => $_POST['cheque_no'][$r],                                'cc_no'        => $_POST['cc_no'][$r],                                'cc_holder'    => $_POST['cc_holder'][$r],                                'cc_month'     => $_POST['cc_month'][$r],                                'cc_year'      => $_POST['cc_year'][$r],                                'cc_type'      => $_POST['cc_type'][$r],                                'cc_cvv2'      => $_POST['cc_cvv2'][$r],                                'created_by'   => $this->session->userdata('user_id'),                                'type'         => 'received',                                'note'         => $_POST['payment_note'][$r],                                'pos_paid'     => $_POST['amount'][$r],                                'pos_balance'  => $_POST['balance_amount'][$r],                                );                        }                    }                }            }            if (!isset($payment) || empty($payment)) {                $payment = array();            }					}				if ($this->form_validation->run() == TRUE && !empty($products) && !empty($data)) {			if ($suspend) {				if ($this->pos_model->suspendSale($data, $products, $did)){					return true;				}			}else{				if ($sale = $this->pos_model->addSales($data, $products, $payment, $did)) {					return $sale;				}			}		}else{			$data['old_sale'] = NULL;            $data['oid'] = NULL;            if ($duplicate_sale) {                if ($old_sale = $this->pos_model->getInvoiceByID($duplicate_sale)) {                    $inv_items = $this->pos_model->getSaleItems($duplicate_sale);                    $this->data['oid'] = $duplicate_sale;                    $this->data['old_sale'] = $old_sale;                    $this->data['message'] = lang('old_sale_loaded');                    $this->data['customer'] = $this->pos_model->getCompanyByID($old_sale->customer_id);                } else {                    
			$this->session->set_flashdata('error', lang("bill_x_found"));
			//admin_redirect("pos");
			}            }            $data['suspend_sale'] = NULL;            if ($sid) {                if ($suspended_sale = $this->pos_model->getOpenBillByID($sid)) {                    $inv_items = $this->pos_model->getSuspendedSaleItems($sid);                    $data['sid'] = $sid;                    $data['suspend_sale'] = $suspended_sale;                    $data['message'] = $this->lang['suspended_sale_loaded'];                    $data['customer'] = $this->pos_model->getCompanyByID($suspended_sale->customer_id);                    $data['reference_note'] = $suspended_sale->suspend_note;                } else {                    $this->session->set_flashdata('error', $this->lang["bill_x_found"]);
			//admin_redirect("pos");
			}            }            if (($sid || $duplicate_sale) && $inv_items) {
				// krsort($inv_items); 
				$c = rand(100000, 9999999);                    foreach ($inv_items as $item) {                        $row = $this->site->getProductByID($item->product_id);
				if (!$row) {
					$row = json_decode('{}');                            $row->tax_method = 0;                            $row->quantity = 0;                        } else {                            $category = $this->site->getCategoryByID($row->category_id);                            $row->category_name = $category->name;                            unset($row->cost, $row->details, $row->product_details, $row->image, $row->barcode_symbology, $row->cf1, $row->cf2, $row->cf3, $row->cf4, $row->cf5, $row->cf6, $row->supplier1price, $row->supplier2price, $row->cfsupplier3price, $row->supplier4price, $row->supplier5price, $row->supplier1, $row->supplier2, $row->supplier3, $row->supplier4, $row->supplier5, $row->supplier1_part_no, $row->supplier2_part_no, $row->supplier3_part_no, $row->supplier4_part_no, $row->supplier5_part_no);                        }                        $pis = $this->site->getPurchasedItems($item->product_id, $item->warehouse_id, $item->option_id);                        if ($pis) {                            foreach ($pis as $pi) {                                $row->quantity += $pi->quantity_balance;                            }                        }                        $row->id = $item->product_id;                        $row->code = $item->product_code;                        $row->name = $item->product_name;                        $row->type = $item->product_type;                        $row->quantity += $item->quantity;                        $row->discount = $item->discount ? $item->discount : '0';                        $row->price = $this->sma->formatDecimal($item->net_unit_price + $this->sma->formatDecimal($item->item_discount / $item->quantity));                        $row->unit_price = $row->tax_method ? $item->unit_price + $this->sma->formatDecimal($item->item_discount / $item->quantity) + $this->sma->formatDecimal($item->item_tax / $item->quantity) : $item->unit_price + ($item->item_discount / $item->quantity);                        $row->real_unit_price = $item->real_unit_price;                        $row->base_quantity = $item->quantity;                        $row->base_unit = isset($row->unit) ? $row->unit : $item->product_unit_id;                        $row->base_unit_price = $row->price ? $row->price : $item->unit_price;                        $row->unit = $item->product_unit_id;                        $row->qty = $item->unit_quantity;                        $row->tax_rate = $item->tax_rate_id;                        $row->serial = $item->serial_no;                        $row->option = $item->option_id;                        $options = $this->pos_model->getProductOptions($row->id, $item->warehouse_id);                        if ($options) {                            $option_quantity = 0;                            foreach ($options as $option) {                                $pis = $this->site->getPurchasedItems($row->id, $item->warehouse_id, $item->option_id);                                if ($pis) {                                    foreach ($pis as $pi) {                                        $option_quantity += $pi->quantity_balance;                                    }                                }                                if ($option->quantity > $option_quantity) {                                    $option->quantity = $option_quantity;                                }                            }                        }                        $row->comment = isset($item->comment) ? $item->comment : '';                        $row->ordered = 1;                        $combo_items = false;                        if ($row->type == 'combo') {                            $combo_items = $this->pos_model->getProductComboItems($row->id, $item->warehouse_id);                        }                        $units = $this->site->getUnitsByBUID($row->base_unit);                        $tax_rate = $this->site->getTaxRateByID($row->tax_rate);                        $ri = $this->Settings->item_addition ? $row->id : $c;                        $pr[$ri] = array('id' => $c, 'item_id' => $row->id, 'label' => $row->name . " (" . $row->code . ")",                                'row' => $row, 'combo_items' => $combo_items, 'tax_rate' => $tax_rate, 'units' => $units, 'options' => $options);                        $c++;                    }                    $data['items'] = json_encode($pr);            } else {                $data['customer'] = array();
					//$this->site->getCompanyByID($this->pos_settings->default_customer);
					$data['reference_note'] = NULL;            }
					//$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
					$data['message'] = isset($this->data['message']) ? $this->data['message'] : $this->session->flashdata('message');
					// $this->data['biller'] = $this->site->getCompanyByID($this->pos_settings->default_biller);
					$data['billers'] = $this->site->getAllCompanies('biller');            $data['warehouses'] = $this->site->getAllWarehouses();            $data['tax_rates'] = $this->site->getAllTaxRates();            $data['user'] = $this->site->getUser();            $data["tcp"] = $this->pos_model->products_count($this->pos_settings->default_category);            $data['products'] = $this->ajaxproducts($this->pos_settings->default_category);            $data['categories'] = $this->site->getAllCategories();            $data['brands'] = $this->site->getAllBrands();            $data['subcategories'] = $this->site->getSubCategories($this->pos_settings->default_category);            $data['printer'] = $this->pos_model->getPrinterByID($this->pos_settings->printer);            $order_printers = json_decode($this->pos_settings->order_printers);            $printers = array();            if (!empty($order_printers)) {                foreach ($order_printers as $printer_id) {                    $printers[] = $this->pos_model->getPrinterByID($printer_id);                }            }            $data['order_printers'] = $printers;            $data['pos_settings'] = $this->pos_settings;	        if ($inv = $this->pos_model->getInvoiceByID($sid)) {	            $data['rows'] = $this->pos_model->getAllInvoiceItems($inv->id);	            $data['biller'] = $this->site->getUserByID($inv->biller_id);	            $data['customer'] = $this->site->getCompanyByID($inv->customer_id);	            $data['payments'] = $this->pos_model->getInvoicePayments($inv->id);	            $data['return_sale'] = $inv->return_id ? $this->pos_model->getInvoiceByID($inv->return_id) : NULL;	            $data['return_rows'] = $inv->return_id ? $this->pos_model->getAllInvoiceItems($inv->return_id) : NULL;	            $data['return_payments'] = $this->data['return_sale'] ? $this->pos_model->getInvoicePayments($this->data['return_sale']->id) : NULL;	            $data['inv'] = $inv;	            $data['print'] = $inv->id;	            $data['created_by'] = $this->site->getUser($inv->created_by);	        }			return $data;		}			}	public function getProductDataByCode($code = NULL, $warehouse_id = NULL, $customer_id = NULL)    {    	if($warehouse_id == NULL) $warehouse_id =0;    	$warehouse = $this->site->getWarehouseByID($warehouse_id);        $customer = $this->site->getCompanyByID($customer_id);        $customer_group = $this->site->getCustomerGroupByID($customer->customer_group_id);        $row = $this->pos_model->getWHProduct($code, $warehouse_id);		$option = false;				if ($row) {			            unset($row->cost, $row->details, $row->product_details, $row->image, $row->barcode_symbology, $row->cf1, $row->cf2, $row->cf3, $row->cf4, $row->cf5, $row->cf6, $row->supplier1price, $row->supplier2price, $row->cfsupplier3price, $row->supplier4price, $row->supplier5price, $row->supplier1, $row->supplier2, $row->supplier3, $row->supplier4, $row->supplier5, $row->supplier1_part_no, $row->supplier2_part_no, $row->supplier3_part_no, $row->supplier4_part_no, $row->supplier5_part_no);                        $row->item_tax_method = $row->tax_method;            $row->qty = 1;            $row->discount = '0';            $row->serial = '';            $options = $this->pos_model->getProductOptions($row->id, $warehouse_id);            if ($options) {                $opt = current($options);                if (!$option) {                    $option = $opt->id;                }            } else {                $opt = json_decode('{}');                $opt->price = 0;            }            $row->option = $option;			if($row->type == 'material'){	            $row->quantity = 0;	            $pis = $this->site->getPurchasedItems($row->id, $warehouse_id, $row->option);								print_r($pis);die;	            if ($pis) {	                foreach ($pis as $pi) {	                    $row->quantity += $pi->quantity_balance;	                }	            }	        }
					//print_r($row);die; 
					if ($row->type == 'material' && (!$this->Settings->overselling && $row->quantity < 1)) {            	$pr = array('result'=>'failed');
					//print_r($pr);die;
					return nv_jsonOutput($pr);
					}            if ($options) {                $option_quantity = 0;                foreach ($options as $option) {                    $pis = $this->site->getPurchasedItems($row->id, $warehouse_id, $row->option);                    if ($pis) {                        foreach ($pis as $pi) {                            $option_quantity += $pi->quantity_balance;                        }                    }                    if ($option->quantity > $option_quantity) {                        $option->quantity = $option_quantity;                    }                }            }            if ($this->sma->isPromo($row)) {                $row->price = $row->promo_price;            } elseif ($customer->price_group_id) {                if ($pr_group_price = $this->site->getProductGroupPrice($row->id, $customer->price_group_id)) {                    $row->price = $pr_group_price->price;                }            } elseif ($warehouse->price_group_id) {                if ($pr_group_price = $this->site->getProductGroupPrice($row->id, $warehouse->price_group_id)) {                    $row->price = $pr_group_price->price;                }            }            $row->price = $row->price + (($row->price * $customer_group->percent) / 100);            $row->real_unit_price = $row->price;            $row->base_quantity = 1;            $row->base_unit = $row->unit;            $row->base_unit_price = $row->price;            $row->unit = $row->sale_unit ? $row->sale_unit : $row->unit;            $row->comment = '';            $combo_items = false;            if ($row->type == 'combo') {                $combo_items = $this->pos_model->getProductComboItems($row->id, $warehouse_id);            }            $units = $this->site->getUnitsByBUID($row->base_unit);            $tax_rate = $this->site->getTaxRateByID($row->tax_rate);            $pr_i = array('id' => sha1($row->id), 'item_id' => $row->id, 'label' => $row->name . " (" . $row->code . ")", 'category' => $row->category_id, 'row' => $row, 'combo_items' => $combo_items, 'tax_rate' => $tax_rate, 'units' => $units, 'options' => $options);            $pr = array('result'=>'success', 'pr' => $pr_i);
					//print_r($pr);die;
					return nv_jsonOutput($pr);			        } else {        	 $pr = array('result'=>'failed');
					//print_r($pr);die;
					return nv_jsonOutput($pr);        }	}	public function ajaxsecondcategorydata($category_id = NULL)    {        $subcategories = $this->site->getSubSecondCategories($category_id);        $scats = '';        if ($subcategories) {            foreach ($subcategories as $category) {                $scats .= "<button id=\"subsecondcategory-" . $category->id . "\" type=\"button\" value='" . $category->id . "' class=\"btn-prni subcategory\" ><img src=\"" . base_url() ."assets/uploads/thumbs/" . ($category->image ? $category->image : 'no_image.png') . "\" class='img-rounded img-thumbnail' /><span>" . $category->name . "</span></button>";            }        }        $products = $this->ajaxproductssecond($category_id);        if (!($tcp = $this->pos_model->products_count($category_id))) {            $tcp = 0;        }        $this->sma->send_json(array('products' => $products, 'subcategories' => $scats, 'tcp' => $tcp));    }	public function ajaxcategorydata($category_id = NULL)    {        $subcategories = $this->site->getSubCategories($category_id);        $scats = '';        if ($subcategories) {            foreach ($subcategories as $category) {                $scats .= "<button id=\"subcategory-" . $category->id . "\" type=\"button\" value='" . $category->id . "' class=\"btn-prni subcategory\" ><img src=\"" . base_url() ."assets/uploads/thumbs/" . ($category->image ? $category->image : 'no_image.png') . "\" class='img-rounded img-thumbnail' /><span>" . $category->name . "</span></button>";            }        }        $products = $this->ajaxproducts($category_id);        if (!($tcp = $this->pos_model->products_count($category_id))) {            $tcp = 0;        }        $this->sma->send_json(array('products' => $products, 'subcategories' => $scats, 'tcp' => $tcp));    }	public function ajaxproducts($category_id = NULL,$brand_id = NULL , $subcategory_id = NULL )    {    	$page = 0;        $config["per_page"] = $this->pos_settings->pro_limit;		        $products = $this->pos_model->fetch_products($category_id, $config["per_page"], $page, $subcategory_id, $brand_id);        $pro = 1;        $prods = '<div>';        if (!empty($products)) {            foreach ($products as $product) {                $count = $product->id;                if ($count < 10) {                    $count = "0" . ($count / 100) * 100;                }                if ($category_id < 10) {                    $category_id = "0" . ($category_id / 100) * 100;                }                $prods .= "<button id=\"product-" . $category_id . $count . "\" type=\"button\" value='" . $product->code . "' title=\"" . $product->name . "\" class=\"btn-prni btn-" . $this->pos_settings->product_button_color . " product pos-tip\" data-container=\"body\"><img src=\"" . NV_BASE_SITEURL . NV_UPLOADS_DIR . "/" . $this->mod_data . "/" . $product->image . "\" alt=\"" . $product->name . "\" class='img-rounded' /><span>" . $product->name . "</span></button>";                $pro++;            }        }        $prods .= "</div>";        return $prods;    }	public function ajaxproductssecond($category_id = NULL,$brand_id = NULL , $subcategory_id = NULL )    {    	$page = 0;        $config["per_page"] = $this->pos_settings->pro_limit;		        $products = $this->pos_model->fetch_products_second($category_id, $config["per_page"], $page, $subcategory_id, $brand_id);        $pro = 1;        $prods = '<div>';        if (!empty($products)) {            foreach ($products as $product) {                $count = $product->id;                if ($count < 10) {                    $count = "0" . ($count / 100) * 100;                }                if ($category_id < 10) {                    $category_id = "0" . ($category_id / 100) * 100;                }                $prods .= "<button id=\"product-" . $category_id . $count . "\" type=\"button\" value='" . $product->code . "' title=\"" . $product->name . "\" class=\"btn-prni btn-" . $this->pos_settings->product_button_color . " product pos-tip\" data-container=\"body\"><img src=\"" . NV_BASE_SITEURL . NV_UPLOADS_DIR . "/" . $this->mod_data . "/" . $product->image . "\" alt=\"" . $product->name . "\" class='img-rounded' /><span>" . $product->name . "</span></button>";                $pro++;            }        }        $prods .= "</div>";        return $prods;    }	
}

